require("knitr")
opts_knit$set(root.dir = "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 5/8. Pengantar Sains Data/Proj")
path <- function() gsub  ( "\\\\",  "/",  readClipboard ()  )
#Copy path, Panggil function di console
#Copy r path, paste ke var yang diinginkan
path()
path()
require("knitr")
opts_knit$set(root.dir = "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 6/2. Teknik Pembelajaran Mesin/Project")
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 6/2. Teknik Pembelajaran Mesin/Project/Chart"
#install.packages("tensorflow")
#install.packages("keras")
#library("reticulate")
#virtualenv_create("r-reticulate2", python = install_python())
#tensorflow::install_tensorflow()
#keras::install_keras()
# Delete Installation
#wunlink("~/.virtualenvs/r-tensorflow", recursive = TRUE)
install_load('rio')
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("DT","dplyr","ggplot2","gridExtra","MASS","tree")
theme1.1 <- list(
geom_hline(yintercept = 0, size = 1, colour="#333333"),
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=-20)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 0)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("DT","dplyr","ggplot2","gridExtra","MASS","tree","rio")
theme1.1 <- list(
geom_hline(yintercept = 0, size = 1, colour="#333333"),
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=-20)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = 0)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
)
#install.packages("tensorflow")
#install.packages("keras")
#library("reticulate")
#virtualenv_create("r-reticulate2", python = install_python())
#tensorflow::install_tensorflow()
#keras::install_keras()
# Delete Installation
#wunlink("~/.virtualenvs/r-tensorflow", recursive = TRUE)
data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1382-TPM/main/Materi/Prak%2004/ObesityDataSet.csv")
data <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1382-TPM/main/Materi/Prak%2004/ObesityDataSet.csv")
datatable(data)
str(data)
dt4 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1382-TPM/main/Materi/Prak%2004/ObesityDataSet.csv")
datatable(dt4)
str(dt4)
colSums(is.na(dt4))
install_load("tensorflow","keras","caret")
install_load("tensorflow","keras","caret")
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i]) == TRUE){
dt4[,i] <- to_categorical(as.integer(dt4[,i]) - 1)
}
}
# Contoh Hasil One-Hot Encoder
head(dt4$MTRANS)
View(dt)
View(dt4)
install_load("tensorflow","keras","caret")
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i]) == TRUE){
dt4[,i] <- to_categorical(as.integer(dt4[,i]) - 1)
}
}
# Contoh Hasil One-Hot Encoder
head(dt4$MTRANS)
lapply(c("tensorflow","keras","caret"), require, character.only = TRUE)
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i]) == TRUE){
dt4[,i] <- to_categorical(as.integer(dt4[,i]) - 1)
}
}
# Contoh Hasil One-Hot Encoder
head(dt4$MTRANS)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i]) == TRUE){
dt4[,i] <- to_categorical(as.integer(dt4[,i]) - 1)
}
}
# Contoh Hasil One-Hot Encoder
head(dt4$MTRANS)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i])){
dt4[,i] <- as.data.frame(model.matrix(~ dt4[,i] - 1))
}
}
# Contoh Hasil One-Hot Encoder
head(dt4$MTRANS)
str(dt4)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i])){
# Mendapatkan jumlah level dalam faktor
nlevels <- length(levels(dt4[, i]))
# Melakukan one-hot encoding dengan to_categorical
encoded <- to_categorical(as.integer(dt4[,i]) - 1, nlevels = nlevels)
# Menambahkan hasil encoding ke dalam dataframe
dt4 <- cbind(dt4[, -i], encoded)
}
}
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4$MTRANS)
str(dt4$MTRANS)
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4$MTRANS)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i])){
encoded <- to_categorical(as.integer(dt4[,i]) - 1)
dt4 <- cbind(dt4[, -i], encoded)  # Menambahkan hasil encoding ke dalam dataframe
}
}
# Hapus kolom faktor yang sudah di-encode
dt4 <- dt4[, !sapply(dt4, is.factor)]
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4$MTRANS)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i])){
encoded <- to_categorical(as.integer(dt4[,i]) - 1)
colnames(encoded) <- paste0(names(dt4)[i], "_", levels(dt4[, i]))  # Mengatur nama kolom hasil encoding
dt4 <- cbind(dt4[, -i], encoded)  # Menambahkan hasil encoding ke dalam dataframe
}
}
# Hapus kolom faktor yang sudah di-encode
dt4 <- dt4[, !sapply(dt4, is.factor)]
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4)
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4$MTRANS)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i])){
encoded <- to_categorical(as.integer(dt4[,i]) - 1)
colnames(encoded) <- paste0(names(dt4)[i], "_", levels(dt4[, i]))  # Mengatur nama kolom hasil encoding
dt4 <- cbind(dt4[, -i], encoded)  # Menambahkan hasil encoding ke dalam dataframe
}
}
# Hapus kolom faktor yang sudah di-encode
dt4 <- dt4[, !sapply(dt4, is.factor)]
# Melihat hasil one-hot encoding untuk MTRANS
head(dt4$MTRANS)
str(dt4)
head(dt4)
invisible(lapply(c("tensorflow","keras","caret"), library, character.only = TRUE))
# One-Hot Encoder
dt4 <- dummyVars(" ~ .", data=dt4)
head(dt4$MTRANS)
library(caret)
# One-Hot Encoder
dt4 <- dummyVars(" ~ .", data=dt4)
library(tensorflow); library(keras); library(caret)
# One-Hot Encoder
for(i in 1:(dim(dt4)[2] - 1)){
if(is.factor(dt4[,i]) == TRUE){
dt4[,i] <- to_categorical(as.integer(dt4[,i]) - 1)
}
}
dt4 <- import("https://raw.githubusercontent.com/Zen-Rofiqy/STA1382-TPM/main/Materi/Prak%2004/ObesityDataSet.csv")
