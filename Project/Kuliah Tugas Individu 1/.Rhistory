path <- function() gsub  ( "\\\\",  "/",  readClipboard ()  )
require("knitr")
opts_knit$set(root.dir = "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 6/2. Teknik Pembelajaran Mesin/Project/Kuliah Tugas Individu 1")
#Export chart
export.chart <- "C:/Users/Fathan/Documents/Obsidian Vault/2. Kuliah/Smt 6/2. Teknik Pembelajaran Mesin/Project/Kuliah Tugas Individu 1/Chart"
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
#install.packages("tensorflow")
#install.packages("keras")
#library("reticulate")
#virtualenv_create("r-reticulate2", python = install_python())
#tensorflow::install_tensorflow()
#keras::install_keras()
# Delete Installation
#wunlink("~/.virtualenvs/r-tensorflow", recursive = TRUE)
install_load("DT","dplyr","ggplot2","gridExtra","MASS","neuralnet")
theme2 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=0)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = -40)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
)
data <- read.csv("data ann.csv")
#Data Type
str(data)
colSums(is.na(data))
install_load('ggtext')
chart <-
ggplot(data, aes(x=rating,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nRating", y='',
title = "Sebaran Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(data$rating), y = 1.25,
label = paste("Mean:",
round(mean(data$rating),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(data$rating),
xend = mean(data$rating),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("01_Sebaran Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
library(tensorflow); library(caret); library(keras); library(lattice); library(reticulate)
set.seed(123)
# Train-Testing Split
train.index <- createDataPartition(data$rating, p = 0.8, list = FALSE)
train <- data[train.index, ]
test <- data[-train.index, ]
# Melakukan Feature Scaling min max (0, 1)
preprocessParams <- preProcess(train[, -ncol(data)], method=c("range"))
train_X <- as.matrix(predict(preprocessParams, train[, -ncol(data)]))
test_X <- as.matrix(predict(preprocessParams, test[, -ncol(data)]))
train_y <- train[, ncol(data)]
test_y <- test[, ncol(data)]
# Membuat model neural network
model.tanh <- keras_model_sequential() %>%
#Input
layer_dense(units = 128, activation = "tanh", input_shape = ncol(train_X)) %>%
layer_dropout(0.3) %>%
#Hidden layer 1
layer_dense(units = 128, activation = "tanh") %>%
layer_dropout(0.3) %>%
#Hidden layer 2
layer_dense(units = 128, activation = "tanh") %>%
layer_dropout(0.3) %>%
#Output
layer_dense(units = 1, activation = "linear")
install.packages("tensorflow")
install.packages("tensorflow")
#install.packages("tensorflow")
install.packages("keras")
#install.packages("tensorflow")
install.packages("keras")
library("reticulate")
virtualenv_create("r-reticulate2", python = install_python())
virtualenv_create("r-reticulate2", python = install_python())
#virtualenv_create("r-reticulate2", python = install_python())
tensorflow::install_tensorflow()
library("reticulate")
library(tensorflow); library(caret); library(keras); library(lattice)
install_load("DT","dplyr","ggplot2","gridExtra","MASS","neuralnet")
theme2 <- list(
theme(axis.text.x = element_text(angle = 45, hjust = 1,
margin = margin(b = 10, t=0)),
axis.text.y = element_text(vjust = 0.5, face = "bold",
margin = margin(l = 20, r = -40)),
plot.title = element_text(hjust = 0.5, face = "bold"),
text = element_text(size = 30),
plot.subtitle = element_text(hjust = 0.5),
panel.background = element_rect(fill = 'transparent'),
plot.background = element_rect(fill='transparent', color=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
)
data <- read.csv("data ann.csv")
#Data Type
str(data)
colSums(is.na(data))
install_load('ggtext')
chart <-
ggplot(data, aes(x=rating,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nRating", y='',
title = "Sebaran Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(data$rating), y = 1.25,
label = paste("Mean:",
round(mean(data$rating),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(data$rating),
xend = mean(data$rating),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("01_Sebaran Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
set.seed(123)
# Train-Testing Split
train.index <- createDataPartition(data$rating, p = 0.8, list = FALSE)
train <- data[train.index, ]
test <- data[-train.index, ]
# Melakukan Feature Scaling min max (0, 1)
preprocessParams <- preProcess(train[, -ncol(data)], method=c("range"))
train_X <- as.matrix(predict(preprocessParams, train[, -ncol(data)]))
test_X <- as.matrix(predict(preprocessParams, test[, -ncol(data)]))
train_y <- train[, ncol(data)]
test_y <- test[, ncol(data)]
# Membuat model neural network
model.tanh <- keras_model_sequential() %>%
#Input
layer_dense(units = 128, activation = "tanh", input_shape = ncol(train_X)) %>%
layer_dropout(0.3) %>%
#Hidden layer 1
layer_dense(units = 128, activation = "tanh") %>%
layer_dropout(0.3) %>%
#Hidden layer 2
layer_dense(units = 128, activation = "tanh") %>%
layer_dropout(0.3) %>%
#Output
layer_dense(units = 1, activation = "linear")
# Mengkompilasi model
model.tanh %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = list("mean_squared_error", "mean_absolute_error")
)
# Melakukan tahapan pelatihan model
history.tanh <- model.tanh %>% fit(
train_X, train_y,
shuffle = T,
epochs = 100,
batch_size = 32,
validation_split = 0.2
)
print(model.tanh)
plot(history.tanh)
# Evaluasi Model dengan data Test
prediksi.tanh <- predict(model.tanh, test_X)
datatable(prediksi.tanh, filter = 'top',
options = list(pageLength = 6))
chart <-
ggplot(data, aes(x=prediksi.tanh,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(data$prediksi.tanh), y = 1.25,
label = paste("Mean:",
round(mean(data$prediksi.tanh),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(data$prediksi.tanh),
xend = mean(data$prediksi.tanh),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
prediksi.tanh
colnames(prediksi.tanh)
str(prediksi.tanh)
prediksi.tanh[,1]
chart <-
ggplot(prediksi.tanh, aes(x=prediksi.tanh[,1],
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(prediksi.tanh[,1]), y = 1.25,
label = paste("Mean:",
round(mean(prediksi.tanh[,1]),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(prediksi.tanh[,1]),
xend = mean(prediksi.tanh[,1]),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
# Evaluasi Model dengan data Test
prediksi.tanh <- predict(model.tanh, test_X) %>% as.data.frame()
datatable(prediksi.tanh, filter = 'top',
options = list(pageLength = 6))
chart <-
ggplot(prediksi.tanh, aes(x=V1,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=T, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(prediksi.tanh$V1), y = 1.25,
label = paste("Mean:",
round(mean(prediksi.tanh$V1),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(prediksi.tanh$V1),
xend = mean(prediksi.tanh$V1),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("02_Sebaran Prediksi Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
chart <-
ggplot(prediksi.tanh, aes(x=V1,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=F, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(prediksi.tanh$V1), y = 1.25,
label = paste("Mean:",
round(mean(prediksi.tanh$V1),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(prediksi.tanh$V1),
xend = mean(prediksi.tanh$V1),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("02_Sebaran Prediksi Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
# Mengevaluasi model menggunakan data uji
scores.tanh <- model.tanh %>% evaluate(test_X, test_y)
print(scores.tanh)
keras_train.tanh <- model.tanh %>% predict(train_X)
keras_test.tanh <- model.tanh %>% predict(test_X)
# Training Evaluation
postResample(keras_train.tanh[,1], train$rating)
# Testing Evaluation
postResample(keras_test.tanh[,1], test$rating)
# Membuat model neural network dengan 2 hidden layer
model.relu <- keras_model_sequential() %>%
layer_dense(units = 128, activation = "relu", input_shape = ncol(train_X)) %>%
layer_dropout(0.3) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.3) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.3) %>%
layer_dense(units = 1, activation = "linear")
# Mengkompilasi model
model.relu %>% compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = list("mean_squared_error", "mean_absolute_error")
)
# Melakukan tahapan pelatihan model
history.relu <- model.relu %>% fit(
train_X, train_y,
shuffle = T,
epochs = 100,
batch_size = 32,
validation_split = 0.2
)
print(model.relu)
plot(history.relu)
# Evaluasi Model dengan data Test
prediksi.relu <- predict(model.relu, test_X) %>% as.data.frame()
datatable(prediksi.relu, filter = 'top',
options = list(pageLength = 6))
# Mengevaluasi model menggunakan data uji
scores.relu<- model.relu %>% evaluate(test_X, test_y)
print(scores.relu)
keras_train.relu <- model.relu %>% predict(train_X)
keras_test.relu <- model.relu %>% predict(test_X)
# Training Evaluation
postResample(keras_train.relu[,1], train$rating)
# Testing Evaluation
postResample(keras_test.relu[,1], test$rating)
# Evaluasi Model dengan data Test
prediksi.relu <- predict(model.relu, test_X) %>% as.data.frame()
datatable(prediksi.relu, filter = 'top',
options = list(pageLength = 6))
chart <-
ggplot(prediksi.tanh, aes(x=V1,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=F, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(prediksi.tanh$V1), y = 1.25,
label = paste("Mean:",
round(mean(prediksi.tanh$V1),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(prediksi.tanh$V1),
xend = mean(prediksi.tanh$V1),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("03_Sebaran Prediksi Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
chart <-
ggplot(prediksi.relu, aes(x=V1,
y='')) +
#Violin
geom_violin(scale="count", fill='#4692A0', color='black', alpha=.65,
trim = FALSE) +
#Boxplot
geom_boxplot(fill='#49535C', color='black',
outlier.size=4, outlier.color='#49535C',
notch=F, width=0.2) +
#Mean Marker
stat_summary(fun = mean, geom = "point", shape = 16, size = 4,
color = "#AB8264") +
theme(plot.title = element_text(hjust=0.5),legend.position = "none") +
labs(x = "\nPrediksi Rating", y='',
title = "Sebaran Prediksi Rating Skema Pinjaman") + theme2 +
#Tambah Mean Value
geom_richtext(
data = data.frame(x = mean(prediksi.relu$V1), y = 1.25,
label = paste("Mean:",
round(mean(prediksi.relu$V1),
2))),
aes(x, y, label = label), size = 7, color = "white",
fill = "#AB8264", box.color = "white", parse = TRUE
) +
#Tambah panah
geom_segment(aes(x = mean(prediksi.relu$V1),
xend = mean(prediksi.relu$V1),
y = 1,
yend = 1.2225),
arrow = arrow(type = "closed", length = unit(0.1, "inches")),
lineend = "round", color = "#AB8264", size=1.5)
chart
#Export Chart
ggsave("03_Sebaran Prediksi Rating Skema Pinjaman.png", chart, path = export.chart,
dpi = 300, height = 10, width = 20)
min(prediksi.relu)
max(prediksi.relu)
min(prediksi.relu$V1)
min(prediksi.tanh$V1)
max(prediksi.tanh$V1)
